#### Labels
ADJUST_DIF       = 0x03DC
AdjBump          = 0x041A
AdjCheckTable    = 0x03E6
AdjNextRow       = 0x03DE
BUILDROW         = 0x00AB
Count100s        = 0x031E
Count10s         = 0x0329
CountDone        = 0x0334
DIGITS           = 0x0615
DoGameOverMode   = 0x0044
DoPlayMode       = 0x003E
DrawFrame        = 0x0047
DrawVisibleRows  = 0x0069
EXPERTISE        = 0x03AE
ExpDone          = 0x03D8
ExpNoP1          = 0x03DB
ExpP0Ama         = 0x03BC
ExpP1            = 0x03BE
ExpP1Ama         = 0x03D6
F000             = 0x0000
F7FA             = 0x0665
FxRun            = 0x056E
GOMODE           = 0x02AD
GR_PLAYER        = 0x060D
GapDone          = 0x0319
GapOK            = 0x0305
GoCheckP1        = 0x0289
GoKeepGoing      = 0x02B7
GoP1Hit          = 0x029E
INIT             = 0x0146
INIT_GOMODE      = 0x0278
INIT_GO_FX       = 0x0537
INIT_MUSIC       = 0x043B
INIT_PLAYMODE    = 0x019D
INIT_SELMODE     = 0x0235
MA1_01           = 0x0575
MA1_END          = 0x0589
MA2_01           = 0x058D
MA2_END          = 0x059E
MAKE_SCORE       = 0x031A
MA_SONG_1        = 0x0571
MA_SONG_2        = 0x0589
MB1_01           = 0x05A2
MB1_END          = 0x05B4
MB2_01           = 0x05B8
MB2_END          = 0x05CA
MB_SONG_1        = 0x059E
MB_SONG_2        = 0x05B4
MOVE_WALLS       = 0x02B8
MUSICA           = 0x0571
MUSICB           = 0x059E
MoveP0Left       = 0x020E
MoveP0Right      = 0x0209
MoveP1Left       = 0x022F
MoveP1Right      = 0x022A
MusChanA         = 0x0467
MusChanB         = 0x04D1
MusCmdCtrlA      = 0x0489
MusCmdCtrlB      = 0x04F3
MusCmdJumpA      = 0x0499
MusCmdJumpB      = 0x0503
MusCmdToneA      = 0x04A8
MusCmdToneB      = 0x0512
MusDoB           = 0x04CC
MusDoDone        = 0x0536
MusNoteA         = 0x04B3
MusNoteB         = 0x051D
NEW_GAPS         = 0x02E1
NoFirst          = 0x01DC
NoHit            = 0x01F2
NoSelect         = 0x01C3
NoWall           = 0x00F8
PLAYMODE         = 0x01B5
PROCESS_GO_FX    = 0x0554
PROCESS_MUSIC    = 0x0462
SELMODE          = 0x0248
SEL_RESET_CHK    = 0x0423
SKILL_VALUES     = 0x05CA
SelDebounce      = 0x0438
SelExp           = 0x0274
SelP1On          = 0x0269
SelStartGame     = 0x0271
SetMoveP0        = 0x0210
SetMoveP1        = 0x0231
ShowP0           = 0x00C7
ShowP1           = 0x00CE
ShowScore        = 0x0104
TimeP0Pos        = 0x0161
TimeP1Pos        = 0x0169
VIDEO_KERNEL     = 0x000B
WallDone         = 0x02DE
WallOK           = 0x02DB
main             = 0x0000

#### Defines
AUDC0            = 0x0015
AUDC1            = 0x0016
AUDF0            = 0x0017
AUDF1            = 0x0018
AUDV0            = 0x0019
AUDV1            = 0x001A
COLUBK           = 0x0009
COLUP0           = 0x0006
COLUP1           = 0x0007
COLUPF           = 0x0008
CTRLPF           = 0x000A
CXBLPF           = 0x0006
CXCLR            = 0x002C
CXM0FB           = 0x0004
CXM0P            = 0x0000
CXM1FB           = 0x0005
CXM1P            = 0x0001
CXP0FB           = 0x0002
CXP1FB           = 0x0003
CXPPMM           = 0x0007
DEBOUNCE         = 0x0090
ENABL            = 0x001F
ENAM0            = 0x001D
ENAM1            = 0x001E
ENTROPYA         = 0x008D
ENTROPYB         = 0x008E
ENTROPYC         = 0x008F
GAPBITS          = 0x0096
GRP0             = 0x001B
GRP1             = 0x001C
HMBL             = 0x0024
HMCLR            = 0x002B
HMM0             = 0x0022
HMM1             = 0x0023
HMOVE            = 0x002A
HMP0             = 0x0020
HMP1             = 0x0021
INPT0            = 0x0008
INPT1            = 0x0009
INPT2            = 0x000A
INPT3            = 0x000B
INPT4            = 0x000C
INPT5            = 0x000D
INTIM            = 0x0284
MODE             = 0x0088
MUSADEL          = 0x00A3
MUSAIND          = 0x00A4
MUSAVOL          = 0x00A5
MUSBDEL          = 0x00A6
MUSBIND          = 0x00A7
MUSBVOL          = 0x00A8
MUSCMD_CONTROL   = 0x0001
MUSCMD_JUMP      = 0x0000
MUSCMD_VOLUME    = 0x0002
MUS_DEL_1        = 0x0020
MUS_DEL_2        = 0x0040
MUS_DEL_3        = 0x0060
MUS_DEL_4        = 0x0080
MUS_REST         = 0x001F
MUS_TMP0         = 0x0085
MUS_TMP1         = 0x0086
NUSIZ0           = 0x0004
NUSIZ1           = 0x0005
PEFP1            = 0x000C
PF0              = 0x000D
PF1              = 0x000E
PF2              = 0x000F
PLAYR0Y          = 0x0083
PLAYR1Y          = 0x0084
REFP0            = 0x000B
RESBL            = 0x0014
RESM0            = 0x0012
RESM1            = 0x0013
RESMP0           = 0x0028
RESMP1           = 0x0029
RESP0            = 0x0010
RESP1            = 0x0011
RSYNC            = 0x0003
SCANCNT          = 0x0087
SCORE_PF1        = 0x0097
SCORE_PF2        = 0x009D
SWACNT           = 0x0281
SWBCNT           = 0x0283
SWCHA            = 0x0280
SWCHB            = 0x0282
TIM1024T         = 0x0297
TIM1T            = 0x0294
TIM64T           = 0x0296
TIM8T            = 0x0295
TMP0             = 0x0080
TMP1             = 0x0081
TMP2             = 0x0082
VBLANK           = 0x0001
VDELBL           = 0x0027
VDELP0           = 0x0025
VDELP1           = 0x0026
VSYNC            = 0x0000
WALLCNT          = 0x008A
WALLDELY         = 0x008B
WALLDELYR        = 0x008C
WALLDRELA        = 0x0091
WALLDRELB        = 0x0092
WALLDRELC        = 0x0093
WALLHEI          = 0x0095
WALLSTART        = 0x0094
WALL_INC         = 0x0089
WSYNC            = 0x0002
_CPU             = 6502

                  ._CPU = 6502
                  
                  ; Hardware definitions
                  ; On the web: [http://www.alienbill.com/2600/101/docs/stella.html Stella Programmer's Guide]
                  
                  ; The address decoding for the 2600 is very simple. The TIA is accessed
                  ; if A12 is 0 and A7 is 0. The TIA is selected if (address&1080 == 0000).
                  ;
                  ; The TIA chip uses the 6 lower address lines A0-A5. The reads seem to
                  ; ignore A4 and A5.
                  ;
                  ; The addresses have different read/write definitions and many of them
                  ; are strobes that are triggered by writing any value.
                  ;
                  ; Note that the 6502 has an 8-bit stack pointer. The CPU automatically sets the upper
                  ; byte of the address to 01. The RIOT chip RAM ghosts from 00xx to 01xx putting the stack
                  ; in RAM.
                  
                  ; TIA
                  
                  ; Reads
                  .CXM0P    = 0x0000 ; Collisions M0/P1
                  .CXM1P    = 0x0001 ; Collisions M1/P0
                  .CXP0FB   = 0x0002 ; Collisions M0/PF
                  .CXP1FB   = 0x0003 ; Collisions P1/PF
                  .CXM0FB   = 0x0004 ; Collisions M0/PF
                  .CXM1FB   = 0x0005 ; Collisions M1/PF
                  .CXBLPF   = 0x0006 ; Collisions BL/PF
                  .CXPPMM   = 0x0007 ; Collisions P0/P1
                  .INPT0    = 0x0008 ; Paddle input 0
                  .INPT1    = 0x0009 ; Paddle input 1
                  .INPT2    = 0x000A ; Paddle input 2
                  .INPT3    = 0x000B ; Paddle input 3
                  .INPT4    = 0x000C ; Latched inputs (joystick buttons)
                  .INPT5    = 0x000D ; Latched inputs (joystick buttons)
                  
                  ; Writes
                  .VSYNC    = 0x0000 ; D1=1 starts the vertical sync
                  .VBLANK   = 0x0001 ; D1=1 starts the vertical blank (D6 and D7 config INPT0-5)
                  .WSYNC    = 0x0002 ; Halts processor until leading edge of horizontal blank
                  .RSYNC    = 0x0003 ; Resets sync counter (used in chip testing)
                  .NUSIZ0   = 0x0004 ; Number and size of player/missile P0
                  .NUSIZ1   = 0x0005 ; Number and size of player/missile P0
                  .COLUP0   = 0x0006 ; Color-luminance of player 0
                  .COLUP1   = 0x0007 ; Color-luminance of player 1
                  .COLUPF   = 0x0008 ; Color-luminance of play filed
                  .COLUBK   = 0x0009 ; Color-luminance of background
                  .CTRLPF   = 0x000A ; Control playfield, priorities, and ball size
                  .REFP0    = 0x000B ; D3=1 reflects player 0
                  .PEFP1    = 0x000C ; D3=1 reflects player 1
                  .PF0      = 0x000D ; Playfield 0 bits (upper 4 bits)
                  .PF1      = 0x000E ; Playfield 1 bits
                  .PF2      = 0x000F ; Playfield 2 bits
                  .RESP0    = 0x0010 ; Set horizontal position of player 0
                  .RESP1    = 0x0011 ; Set horizontal position of player 1
                  .RESM0    = 0x0012 ; Set horizontal position of missile 0
                  .RESM1    = 0x0013 ; Set horizontal position of missile 1
                  .RESBL    = 0x0014 ; Set horizontal position of ball
                  .AUDC0    = 0x0015 ; Noise, tone, division control channel 0
                  .AUDC1    = 0x0016 ; Noise, tone, division control channel 1
                  .AUDF0    = 0x0017 ; Frequency divider channel 0
                  .AUDF1    = 0x0018 ; Frequency divider channel 1
                  .AUDV0    = 0x0019 ; Volume channel 0
                  .AUDV1    = 0x001A ; Volume channel 1
                  .GRP0     = 0x001B ; Player 0 graphics
                  .GRP1     = 0x001C ; Player 1 graphics
                  .ENAM0    = 0x001D ; D1=1 to enable missile 0
                  .ENAM1    = 0x001E ; D1=1 to enable missile 1
                  .ENABL    = 0x001F ; D1=1 to enable ball
                  .HMP0     = 0x0020 ; Horizontal motion offset for player 0
                  .HMP1     = 0x0021 ; Horizontal motion offset for player 1
                  .HMM0     = 0x0022 ; Horizontal motion offset for missile 0
                  .HMM1     = 0x0023 ; Horizontal motion offset for missile 1
                  .HMBL     = 0x0024 ; Horizontal motion offset for ball
                  .VDELP0   = 0x0025 ; D0=1 to delay player 0 one vertical line
                  .VDELP1   = 0x0026 ; D0=1 to delay player 1 one vertical line
                  .VDELBL   = 0x0027 ; D0=1 to delay ball one vertical line
                  .RESMP0   = 0x0028 ; D1=1 to reset missile 0 to player 0
                  .RESMP1   = 0x0029 ; D1=1 to reset missile 1 to player 1
                  .HMOVE    = 0x002A ;  Executes horizontal motions
                  .HMCLR    = 0x002B ; Clears all horizonal motion registers
                  .CXCLR    = 0x002C ; Clears all collision registers
                  
                  ; PIA
                  
                  ; The PIA (R.I.O.T.) is accessed if A12 is 0 and A7 is 1. If A9 is 0 then the 128 bytes
                  ; of RAM are selected. If A9 is 1 then the PIA timer registers are selected.
                  ;
                  ; The TIA REGS are selected if (address&1280 == 0280).
                  ;
                  ; The TIA RAM is selected if (address&1280 == 0080).
                  ;
                  ; The PIA chip uses the lower 7 address lines A0-A6. Thus the 007F mask below.
                  
                  .SWCHA    = 0x0280 ; Port A Hand controllers
                  .SWACNT   = 0x0281 ; Port A DDR
                  
                  .SWCHB    = 0x0282 ; Port B Console switches
                  ; D7 : P1 difficulty (0=amateur, 1=pro)
                  ; D6 : P0 difficulty (0=amateur, 1=pro)
                  ; D5 : not used
                  ; D4 : not used
                  ; D3 : color or B/W (0=B/W, 1=color)
                  ; D2 : not used
                  ; D1 : game select (0=pressed)
                  ; D0 : game reset (0=pressed)
                  
                  .SWBCNT   = 0x0283 ; Port B DDR
                  .INTIM    = 0x0284 ; Timer output (read only)
                  .TIM1T    = 0x0294 ; Set 1 clock interval (write only)
                  .TIM8T    = 0x0295 ; Set 8 clock interval (write only)
                  .TIM64T   = 0x0296 ; Set 64 clock interval (write only)
                  .TIM1024T = 0x0297 ; Set 1024 clock interval (write only)
                  
                  ; RAM Usage
                  .TMP0      = 128
                  .TMP1      = 129
                  .TMP2      = 130
                  .PLAYR0Y   = 131
                  .PLAYR1Y   = 132
                  .MUS_TMP0  = 133
                  .MUS_TMP1  = 134
                  .SCANCNT   = 135
                  .MODE      = 136
                  .WALL_INC  = 137
                  .WALLCNT   = 138
                  .WALLDELY  = 139
                  .WALLDELYR = 140
                  .ENTROPYA  = 141
                  .ENTROPYB  = 142
                  .ENTROPYC  = 143
                  .DEBOUNCE  = 144
                  .WALLDRELA = 145
                  .WALLDRELB = 146
                  .WALLDRELC = 147
                  .WALLSTART = 148
                  .WALLHEI   = 149
                  .GAPBITS   = 150
                  .SCORE_PF1 = 151
                  .SCORE_PF2 = 157
                  .MUSADEL   = 163
                  .MUSAIND   = 164
                  .MUSAVOL   = 165
                  .MUSBDEL   = 166
                  .MUSBIND   = 167
                  .MUSBVOL   = 168
                  
                  F000:
                  main:
0000: 78               SEI                       ; Turn off interrupts
0001: D8               CLD                       ; Clear the "decimal" flag
0002: A2 FF            LDX      #0xFF            ; Set stack ...
0004: 9A               TXS                       ; ... to the end of RAM
0005: 20 46 01         JSR      INIT             ; Initialize game environment
0008: 20 35 02         JSR      INIT_SELMODE     ; Start out in SELECT-MODE
                  
                  VIDEO_KERNEL:
                  
                  ; TODO assembler needs to check for sizes when there are multiple options. Like STA xx and STA xxxx.
                  ; TODO allow for "<" and ">" overrides.
                  
000B: A9 02            LDA      #2               ; D1 bit ON
000D: 85 02            STA      <WSYNC           ; Wait for the end of the current line
000F: 85 01            STA      <VBLANK          ; Turn the electron beam off
0011: 85 02            STA      <WSYNC           ; Wait for all ...
0013: 85 02            STA      <WSYNC           ; ... the electrons ...
0015: 85 02            STA      <WSYNC           ; ... to drain out.
0017: 85 00            STA      <VSYNC           ; Trigger the vertical sync signal
0019: 85 02            STA      <WSYNC           ; Hold the vsync signal for ...
001B: 85 02            STA      <WSYNC           ; ... three ...
001D: 85 02            STA      <WSYNC           ; ... scanlines
001F: 85 2A            STA      <HMOVE           ; Tell hardware to move all game objects
0021: A9 00            LDA      #0               ; D1 bit OFF
0023: 85 00            STA      <VSYNC           ; Release the vertical sync signal
0025: A9 2B            LDA      #43              ; Set timer to 43*64 = 2752 machine ...
0027: 8D 96 02         STA      TIM64T           ; ... cycles 2752/(228/3) = 36 scanlines
                  
                  ;  ***** LENGTHY GAME LOGIC PROCESSING BEGINS HERE *****
                  
                  ;  Do one of 3 routines while the beam travels back to the top
                  ;  0 = Game Over processing
                  ;  1 = Playing-Game processing
                  ;  2 = Selecting-Game processing
                  
002A: EE 8D 00         INC      ENTROPYA         ; Counting video frames as part of the random number
002D: AD 88 00         LDA      MODE             ; What are we doing between frames?
                  
0030: C9 00            CMP      #0               ; Mode is ...
0032: F0 10            BEQ      DoGameOverMode   ; ... "game over"
0034: C9 01            CMP      #1               ; Mode is ...
0036: F0 06            BEQ      DoPlayMode       ; ... "game play"
0038: 20 48 02         JSR      SELMODE          ; Mode is "select game"
003B: 4C 47 00         JMP      DrawFrame        ; Continue to the visible screen area
                  
                  DoPlayMode:
003E: 20 B5 01         JSR      PLAYMODE         ; Playing-game processing
0041: 4C 47 00         JMP      DrawFrame        ; Continue to the visible screen area
                  
                  DoGameOverMode:
0044: 20 AD 02         JSR      GOMODE           ; Game-over processing
                  
                  ;  ***** LENGTHY GAME LOGIC PROCESSING ENDS HERE *****
                  
                  DrawFrame:
0047: AD 84 02         LDA      INTIM            ; Wait for ...
004A: C9 00            CMP      #0               ; ... the visible area ...
004C: D0 F9            BNE      DrawFrame        ; ... of the screen
                  
004E: 8D 02 00         STA      WSYNC            ; 37th scanline
0051: A9 00            LDA      #0               ; Turn the ...
0053: 8D 01 00         STA      VBLANK           ; ... electron beam back on
                  
0056: A9 00            LDA      #0               ; Zero out ...
0058: 8D 87 00         STA      SCANCNT          ; ... scanline count ...
005B: 8D 80 00         STA      TMP0             ; ... and all ...
005E: 8D 81 00         STA      TMP1             ; ... returns ...
0061: 8D 82 00         STA      TMP2             ; ... expected ...
0064: AA               TAX                       ; ... to come from ...
0065: A8               TAY                       ; ... BUILDROW
                  
0066: 8D 2C 00         STA      CXCLR            ; Clear collision detection
                  
                  DrawVisibleRows:
                  
0069: AD 80 00         LDA      TMP0             ; Get A ready (PF0 value)
006C: 8D 02 00         STA      WSYNC            ; Wait for very start of row
006F: 8E 1B 00         STX      GRP0             ; Player 0 -- in X
0072: 8C 1C 00         STY      GRP1             ; Player 1 -- in Y
0075: 8D 0D 00         STA      PF0              ; PF0      -- in TMP0 (already in A)
0078: AD 81 00         LDA      TMP1             ; PF1      -- in TMP1
007B: 8D 0E 00         STA      PF1              ; ...
007E: AD 82 00         LDA      TMP2             ; PP2      -- in TMP2
0081: 8D 0F 00         STA      PF2              ; ...
                  
0084: 20 AB 00         JSR      BUILDROW         ; This MUST take through to the next line
                  
0087: EE 87 00         INC      SCANCNT          ; Next scan line
008A: AD 87 00         LDA      SCANCNT          ; Do 109*2 = 218 lines
008D: C9 6D            CMP      #109             ; All done?
008F: D0 D8            BNE      DrawVisibleRows  ; No ... get all the visible rows
                  
                  ;  END VISIBLE PART OF FRAME
                  
0091: A9 00            LDA      #0               ; Turn off electron beam
0093: 8D 02 00         STA      WSYNC            ; Next scanline
0096: 8D 0D 00         STA      PF0              ; Play field 0 off
0099: 8D 1B 00         STA      GRP0             ; Player 0 off
009C: 8D 1C 00         STA      GRP1             ; Player 1 off
009F: 8D 0E 00         STA      PF1              ; Play field 1 off
00A2: 8D 0F 00         STA      PF2              ; Play field 2 off
00A5: 8D 02 00         STA      WSYNC            ; Next scanline
                  
00A8: 4C 0B 00         JMP      VIDEO_KERNEL
                  
                  BUILDROW:
                  
00AB: AD 87 00         LDA      SCANCNT          ; Where are we on the screen?
                  
00AE: C9 06            CMP      #6               ; If we are in the ...
00B0: 90 52            BCC      ShowScore        ; ... score area
                  
00B2: 29 07            AND      #7               ; Lower 3 bits as an index again
00B4: A8               TAY                       ; Using Y to lookup graphics
00B5: B9 0D 06         LDA      GR_PLAYER,Y      ; Get the graphics (if enabled on this row)
00B8: AA               TAX                       ; Hold it (for return as player 0)
00B9: A8               TAY                       ; Hold it (for return as player 1)
00BA: AD 87 00         LDA      SCANCNT          ; Scanline count again
00BD: 4A               LSR      A                ; This time ...
00BE: 4A               LSR      A                ; ... we divide ...
00BF: 4A               LSR      A                ; ... by eight (8 rows in picture)
                  
00C0: CD 83 00         CMP      PLAYR0Y          ; Scanline group of the P0 object?
00C3: F0 02            BEQ      ShowP0           ; Yes ... keep the picture
00C5: A2 00            LDX      #0               ; Not time for Player 0 ... no graphics
                  ShowP0:
                  
00C7: CD 84 00         CMP      PLAYR1Y          ; Scanline group of the P1 object?
00CA: F0 02            BEQ      ShowP1           ; Yes ... keep the picture
00CC: A0 00            LDY      #0               ; Not time for Player 0 ... no graphics
                  ShowP1:
                  
00CE: AD 94 00         LDA      WALLSTART        ; Calculate ...
00D1: 18               CLC                       ; ... the bottom ...
00D2: 6D 95 00         ADC      WALLHEI          ; ... of ...
00D5: 8D 80 00         STA      TMP0             ; ... the wall
                  
00D8: AD 87 00         LDA      SCANCNT          ; Scanline count
                  
00DB: CD 94 00         CMP      WALLSTART        ; Past upper part of wall?
00DE: 90 18            BCC      NoWall           ; No ... skip it
00E0: CD 80 00         CMP      TMP0             ; Past lower part of wall
00E3: B0 13            BCS      NoWall           ; Yes ... skip it
                  
                  ;  The wall is on this row
00E5: AD 91 00         LDA      WALLDRELA        ; Draw wall ...
00E8: 8D 80 00         STA      TMP0             ; ... by transfering ...
00EB: AD 92 00         LDA      WALLDRELB        ; ... playfield ...
00EE: 8D 81 00         STA      TMP1             ; ... patterns ...
00F1: AD 93 00         LDA      WALLDRELC        ; ... to ...
00F4: 8D 82 00         STA      TMP2             ; ... return area
00F7: 60               RTS                       ; Done
                  
                  NoWall:
                  ;  The wall is NOT on this row
00F8: A9 00            LDA      #0               ; No walls on this row
00FA: 8D 80 00         STA      TMP0             ; ... clear ...
00FD: 8D 81 00         STA      TMP1             ; ... out ...
0100: 8D 82 00         STA      TMP2             ; ... the playfield
0103: 60               RTS                       ; Done
                  
                  ShowScore:
0104: 29 07            AND      #7               ; OLine=182  Only need the lower 3 bits
0106: A8               TAY                       ; OLine=183  Soon to be an index into a list
                  
                  ;  At this point, the beam is past the loading of the
                  ;  playfield for the left half. We want to make sure
                  ;  that the right half of the playfield is off, so do that
                  ;  now.
                  
0107: A2 00            LDX      #0               ; Blank bit pattern
0109: 8E 80 00         STX      TMP0             ; This will always be blank
010C: 8E 0E 00         STX      PF1              ; Turn off playfield ...
010F: 8E 0F 00         STX      PF2              ; ... for right half of the screen
                  
0112: AA               TAX                       ; Another index
0113: B9 97 00         LDA      SCORE_PF1,Y      ; Lookup the PF1 graphics for this row
0116: 8D 81 00         STA      TMP1             ; Return it to the caller
0119: A8               TAY                       ; We'll need this value again in a second
011A: BD 9D 00         LDA      SCORE_PF2,X      ; Lookup the PF2 graphics for this row
011D: 8D 82 00         STA      TMP2             ; Return it to the caller
                  
0120: 8D 02 00         STA      WSYNC            ; Now on the next row
                  
0123: 8C 0E 00         STY      PF1              ; Repeat the left-side playfield ...
0126: 8D 0F 00         STA      PF2              ; ... onto the new row
                  
0129: BD 9D 00         LDA      SCORE_PF2,X      ; Kill some time waiting for the ...
012C: BD 9D 00         LDA      SCORE_PF2,X      ; ... beam to pass the left half ...
012F: BD 9D 00         LDA      SCORE_PF2,X      ; ... of the playfield again
0132: BD 9D 00         LDA      SCORE_PF2,X      ; ...
0135: BD 9D 00         LDA      SCORE_PF2,X      ; ...
0138: BD 9D 00         LDA      SCORE_PF2,X      ; ...
                  
013B: A2 00            LDX      #0               ; Return 0 (off) for player 0 ...
013D: A0 00            LDY      #0               ; ... and player 1
                  
                  ;  The beam is past the left half of the field again.
                  ;  Turn off the playfield.
                  
013F: 8E 0E 00         STX      PF1              ; 0 to PF1 ...
0142: 8E 0F 00         STX      PF2              ; ... and PF2
0145: 60               RTS                       ;  Done
                  
                  INIT:
                  ;  This function is called ONCE at power-up/reset to initialize various
                  ;  game settings and variables.
                  
0146: A9 40            LDA      #64              ; Wall is ...
0148: 8D 08 00         STA      COLUPF           ; ... redish
014B: A9 7E            LDA      #126             ; P0 is ...
014D: 8D 06 00         STA      COLUP0           ; ... white
0150: A9 00            LDA      #0               ; P1 ...
0152: 8D 07 00         STA      COLUP1           ; ... black
                  
0155: A9 05            LDA      #5               ; Right half of playfield is reflection of left ...
0157: 8D 0A 00         STA      CTRLPF           ; ... and playfield is on top of players
                  
                  ; TODO other hardware inits here
                  
015A: A2 04            LDX      #4               ; Player 0 position count
015C: A0 03            LDY      #3               ; Player 1 position count
015E: 8D 02 00         STA      WSYNC            ; Get a fresh scanline
                  
                  TimeP0Pos:
0161: CA               DEX                       ; Kill time while the beam moves ...
0162: E0 00            CPX      #0               ; ... to desired ...
0164: D0 FB            BNE      TimeP0Pos        ; ... position
0166: 8D 10 00         STA      RESP0            ; Mark player 0's X position
                  
                  TimeP1Pos:
0169: 88               DEY                       ; Kill time while the beam moves ...
016A: C0 00            CPY      #0               ; ... to desired ...
016C: D0 FB            BNE      TimeP1Pos        ; ... position
016E: 8D 11 00         STA      RESP1            ; Mark player 1's X position
                  
0171: 20 AE 03         JSR      EXPERTISE        ; Initialize the players' Y positions base on expert-settings
                  
0174: A9 0A            LDA      #10              ; Wall is ...
0176: 8D 95 00         STA      WALLHEI          ; ... 10 double-scanlines high
                  
0179: A9 00            LDA      #0               ; Set score to ...
017B: 8D 8A 00         STA      WALLCNT          ; ... 0
017E: 20 1A 03         JSR      MAKE_SCORE       ; Blank the score digits
0181: A9 00            LDA      #0               ; Blank bits ...
0183: 8D A2 00         STA      SCORE_PF2+5      ; ... on the end of each ...
0186: 8D 9C 00         STA      SCORE_PF1+5      ; ... digit pattern
                  
0189: 20 DC 03         JSR      ADJUST_DIF       ; Initialize the wall parameters
018C: 20 E1 02         JSR      NEW_GAPS         ; Build the wall's initial gap
                  
018F: A9 70            LDA      #112             ; Set wall position off bottom ...
0191: 8D 94 00         STA      WALLSTART        ; ... to force a restart on first move
                  
0194: A9 00            LDA      #0               ; Zero out ...
0196: 8D 20 00         STA      HMP0             ; ... player 0 motion ...
0199: 8D 21 00         STA      HMP1             ; ... and player 1 motion
                  
019C: 60               RTS                       ; Done
                  
                  INIT_PLAYMODE:
                  
                  ;  This function initializes the game play mode
                  
019D: A9 C0            LDA      #192             ; Background is ...
019F: 8D 09 00         STA      COLUBK           ; ... greenish
01A2: A9 01            LDA      #1               ; Game mode is ...
01A4: 8D 88 00         STA      MODE             ; ... SELECT
01A7: A9 FF            LDA      #255             ; Restart wall score to ...
01A9: 8D 8A 00         STA      WALLCNT          ; ... 0 on first move
01AC: A9 70            LDA      #112             ; Force wall to start ...
01AE: 8D 94 00         STA      WALLSTART        ; ... over on first move
01B1: 20 3B 04         JSR      INIT_MUSIC       ; Initialize the music
01B4: 60               RTS                       ; Done
                  
                  PLAYMODE:
                  
                  ;  This function is called once per frame to process the main game play.
                  
                  
01B5: 20 23 04         JSR      SEL_RESET_CHK    ; Check to see if Reset/Select has changed
                  
01B8: C9 00            CMP      #0               ; Is select pressed?
01BA: F0 07            BEQ      NoSelect         ; No ... skip
01BC: 8E 90 00         STX      DEBOUNCE         ; Restore the old value ...
01BF: 20 35 02         JSR      INIT_SELMODE     ; ... and let select-mode process the toggle
01C2: 60               RTS                       ; Done
                  
                  NoSelect:
01C3: 20 62 04         JSR      PROCESS_MUSIC    ; Process any playing music
01C6: 20 B8 02         JSR      MOVE_WALLS       ; Move the walls
                  
01C9: C9 01            CMP      #1               ; Wall on first row?
01CB: D0 0F            BNE      NoFirst          ; No ... move on
01CD: EE 8A 00         INC      WALLCNT          ; Bump the score
01D0: 20 DC 03         JSR      ADJUST_DIF       ; Change the wall parameters based on score
01D3: AD 8A 00         LDA      WALLCNT          ; Change the ...
01D6: 20 1A 03         JSR      MAKE_SCORE       ; ... score pattern
01D9: 20 E1 02         JSR      NEW_GAPS         ; Calculate the new gap position
                  
                  NoFirst:
01DC: AD 02 00         LDA      CXP0FB          ; Player 0 collision with playfield
01DF: 8D 80 00         STA      TMP0            ; Hold it
01E2: AD 03 00         LDA      CXP1FB          ; Player 1 collision with playfield
01E5: 0D 80 00         ORA      TMP0            ; Did either ...
01E8: 29 80            AND      #128            ; ... player hit ...
01EA: C9 00            CMP      #0              ; ... wall?
01EC: F0 04            BEQ      NoHit           ; No ... move on
01EE: 20 78 02         JSR      INIT_GOMODE     ; Go to Game-Over mode
01F1: 60               RTS                      ; Done
                  
                  NoHit:
01F2: AD 80 02         LDA      SWCHA           ; Joystick
01F5: 29 80            AND      #128            ; Player 0 ...
01F7: C9 00            CMP      #0              ; ... moving left?
01F9: F0 13            BEQ      MoveP0Left      ; Yes ... move left
01FB: AD 80 02         LDA      SWCHA           ; Joystick
01FE: 29 40            AND      #64             ; Player 0 ...
0200: C9 00            CMP      #0              ; ... moving right?
0202: F0 05            BEQ      MoveP0Right     ; Yes ... move right
0204: A9 00            LDA      #0              ; Not moving value
0206: 4C 10 02         JMP      SetMoveP0       ; Don't move the player
                  MoveP0Right:
0209: A9 10            LDA      #16             ; +1
020B: 4C 10 02         JMP      SetMoveP0       ; Set HMP0
                  MoveP0Left:
020E: A9 F0            LDA      #240            ; -1
                  SetMoveP0:
0210: 8D 20 00         STA      HMP0            ; New movement value P0
                  
0213: AD 80 02         LDA      SWCHA           ; Joystick
0216: 29 08            AND      #8              ; Player 1 ...
0218: C9 00            CMP      #0              ; ... moving left?
021A: F0 13            BEQ      MoveP1Left      ; Yes ... move left
021C: AD 80 02         LDA      SWCHA           ; Joystick
021F: 29 04            AND      #4              ; Player 0 ...
0221: C9 00            CMP      #0              ; ... moving right?
0223: F0 05            BEQ      MoveP1Right     ; Yes ... move right
0225: A9 00            LDA      #0              ; Not moving value
0227: 4C 31 02         JMP      SetMoveP1       ; Don't move the player
                  MoveP1Right:
022A: A9 10            LDA      #16             ; +1
022C: 4C 31 02         JMP      SetMoveP1       ; Set HMP0
                  MoveP1Left:
022F: A9 F0            LDA      #240            ; -1
                  SetMoveP1:
0231: 8D 21 00         STA      HMP1            ; New movement value P1
                  
0234: 60               RTS                      ; Done
                  
                  INIT_SELMODE:
                  
                  ;  This function initializes the games SELECT-MODE
                  
0235: A9 00            LDA      #0              ; Turn off ...
0237: 8D 19 00         STA      AUDV0           ; ... all ...
023A: 8D 1A 00         STA      AUDV1           ; ... sound
023D: A9 C8            LDA      #200            ; Background ...
023F: 8D 09 00         STA      COLUBK          ; ... greenish bright
0242: A9 02            LDA      #2              ; Now in ...
0244: 8D 88 00         STA      MODE            ; SELECT game mode
0247: 60               RTS                      ; Done
                  
                  
                  SELMODE:
                  
                  ;  This function is called once per frame to process the SELECT-MODE.
                  ;  The wall moves here, but doesn't change or collide with players.
                  ;  This function selects between 1 and 2 player game.
                  
0248: 20 B8 02         JSR      MOVE_WALLS       ; Move the walls
024B: 20 23 04         JSR      SEL_RESET_CHK    ; Check the reset/select switches
024E: C9 01            CMP      #1               ; RESET button?
0250: F0 1F            BEQ      SelStartGame     ; Yes ... start game
0252: C9 03            CMP      #3               ; RESET and SELECT?
0254: F0 1B            BEQ      SelStartGame     ; Yes ... start game
0256: C9 02            CMP      #2               ; Select only?
0258: D0 1A            BNE      SelExp           ; No ... stay in this mode
025A: AD 84 00         LDA      PLAYR1Y          ; Select toggled. Get player 1 Y coordinate
025D: C9 FF            CMP      #255             ; 2nd player on the screen?
025F: F0 08            BEQ      SelP1On          ; No ... toggle it on
0261: A9 FF            LDA      #255             ; Yes ...
0263: 8D 84 00         STA      PLAYR1Y          ; ... toggle it off
0266: 4C 74 02         JMP      SelExp           ; Move to expertise
                  SelP1On:
0269: A9 0C            LDA      #12              ; Y coordinate
026B: 8D 84 00         STA      PLAYR1Y          ; On screen now
026E: 4C 74 02         JMP      SelExp           ; Move to expertise
                  
                  SelStartGame:
0271: 20 9D 01         JSR      INIT_PLAYMODE    ; Reset toggled ... start game
                  SelExp:
0274: 20 AE 03         JSR      EXPERTISE        ; Adjust both players for pro settings
0277: 60               RTS                       ; Done
                  
                  INIT_GOMODE:
                  
                  ;  This function initializes the GAME-OVER game mode.
                  
0278: 8D 2B 00         STA      HMCLR            ; Stop both players from moving
027B: AD 02 00         LDA      CXP0FB           ; P0 collision ...
027E: 29 80            AND      #128             ; ... with wall
0280: C9 00            CMP      #0               ; Did P0 hit the wall?
0282: D0 05            BNE      GoCheckP1        ; Yes ... leave it at bottom
0284: A9 02            LDA      #2               ; No ... move player 0 ...
0286: 8D 83 00         STA      PLAYR0Y          ; ... up the screen to show win
                  
                  GoCheckP1:
0289: AD 03 00         LDA      CXP1FB           ; P1 collision ...
028C: 29 80            AND      #128             ; ... with wall
028E: C9 00            CMP      #0               ; Did P1 hit the wall?
0290: D0 0C            BNE      GoP1Hit          ; Yes ... leave it at the bottom
0292: AD 84 00         LDA      PLAYR1Y          ; Is P1 even ...
0295: C9 FF            CMP      #255             ; ... on the screen (2 player game?)
0297: F0 05            BEQ      GoP1Hit          ; No ... skip it
0299: A9 02            LDA      #2               ; Player 1 is onscreen and didn't collide ...
029B: 8D 84 00         STA      PLAYR1Y          ; ... move up the screen to show win
                  
                  GoP1Hit:
029E: A9 00            LDA      #0               ; Going to ...
02A0: 8D 88 00         STA      MODE             ; ... game-over mode
02A3: 8D 19 00         STA      AUDV0            ; Turn off any ...
02A6: 8D 1A 00         STA      AUDV1            ; ... sound
02A9: 20 37 05         JSR      INIT_GO_FX       ; Initialize sound effects
02AC: 60               RTS                       ; Done
                  
                  GOMODE:
                  
                  ; This function is called every frame to process the game
                  ; over sequence. When the sound effect has finished, the
                  ; game switches to select mode.
                  
02AD: 20 54 05         JSR      PROCESS_GO_FX    ; Process the sound effects
02B0: C9 00            CMP      #0               ; Effects still running?
02B2: F0 03            BEQ      GoKeepGoing      ; Yes ... let them run
02B4: 20 35 02         JSR      INIT_SELMODE     ; When effect is over, go to select mode
                  GoKeepGoing:
02B7: 60               RTS                       ; Done
                  
                  MOVE_WALLS:
                  
                  ;  This function moves the wall down the screen and back to position 0
                  ;  when it reaches (or passes) 112.
                  
02B8: CE 8B 00         DEC      WALLDELY         ; Wall motion timer
02BB: AD 8B 00         LDA      WALLDELY         ; Time to ...
02BE: C9 00            CMP      #0               ; ... move the wall?
02C0: D0 1C            BNE      WallDone         ; No ... leave it alone
02C2: AD 8C 00         LDA      WALLDELYR        ; Reset the ...
02C5: 8D 8B 00         STA      WALLDELY         ; ... delay count
02C8: AD 94 00         LDA      WALLSTART        ; Current wall position
02CB: 18               CLC                       ; Increment ...
02CC: 6D 89 00         ADC      WALL_INC         ; ... wall position
02CF: C9 70            CMP      #112             ; At the bottom?
02D1: 90 08            BCC      WallOK           ; No ... leave it alone
02D3: A9 00            LDA      #0               ; Else restart ...
02D5: 8D 94 00         STA      WALLSTART        ; ... wall at top of screen
02D8: A9 01            LDA      #1               ; Return flag that wall DID restart
02DA: 60               RTS                       ; Done
                  WallOK:
02DB: 8D 94 00         STA      WALLSTART        ; Store new wall position
                  WallDone:
02DE: A9 00            LDA      #0               ; Return flag that wall did NOT restart
02E0: 60               RTS                       ; Done
                  
                  
                  NEW_GAPS:
                  
                  ;  This function builds the PF0, PF1, and PF2 graphics for a wall
                  ;  with the gap pattern (GAPBITS) placed at random in the 20 bit
                  ;  area.
                  
02E1: A9 FF            LDA      #255             ; Start with ...
02E3: 8D 91 00         STA      WALLDRELA        ; ... solid wall in PF0 ...
02E6: 8D 92 00         STA      WALLDRELB        ; ... and PF1
02E9: AD 96 00         LDA      GAPBITS          ; Store the gap pattern ...
02EC: 8D 93 00         STA      WALLDRELC        ; ... in PF2
                  
02EF: AD 8D 00         LDA      ENTROPYA         ; Get ...
02F2: 6D 8E 00         ADC      ENTROPYB         ; ... a randomish ...
02F5: 6D 8F 00         ADC      ENTROPYC         ; ... number ...
02F8: 8D 8F 00         STA      ENTROPYC         ; Update the random seed
02FB: 29 0F            AND      #15              ; 0 to 15
02FD: C9 0C            CMP      #12              ; Too far to the right?
02FF: F0 04            BEQ      GapOK            ; No ... 12 is OK
0301: 90 02            BCC      GapOK            ; No ... less than 12 is OK
0303: E9 09            SBC      #9               ; Back up 9
                  
                  GapOK:
0305: C9 00            CMP      #0               ; Gap already at far left?
0307: F0 10            BEQ      GapDone          ; Yes ... done
0309: 38               SEC                       ; Roll gap ...
030A: 6E 93 00         ROR      WALLDRELC        ; ... left ...
030D: 2E 92 00         ROL      WALLDRELB        ; ... desired ...
0310: 6E 91 00         ROR      WALLDRELA        ; ... times ...
0313: 38               SEC                       ; All rolls ...
0314: E9 01            SBC      #1               ; ... done?
0316: 4C 05 03         JMP      GapOK            ; No ... do them all
                  GapDone:
0319: 60               RTS                       ; New wall pattern is ready
                  
                  MAKE_SCORE:
                  
                  ;  This function builds the PF1 and PF2 graphics rows for
                  ;  the byte value passed in A. The current implementation is
                  ;  two-digits only ... PF2 is blank.
                  
031A: A2 00            LDX      #0               ; 100's digit
031C: A0 00            LDY      #0               ; 10's digit
                  
                  Count100s:
031E: C9 64            CMP      #100             ; Need another 100s digit?
0320: 90 07            BCC      Count10s         ; No ... move on to 10s
0322: E8               INX                       ; Count ...
0323: 38               SEC                       ; ... value
0324: E9 64            SBC      #100             ; Take off this 100
0326: 4C 1E 03         JMP      Count100s        ; Keep counting
                  Count10s:
0329: C9 0A            CMP      #10              ; Need another 10s digit?
032B: 90 07            BCC      CountDone        ; No ... got all the tens
032D: C8               INY                       ; Count ...
032E: 38               SEC                       ; ... value
032F: E9 0A            SBC      #10              ; Take off this 10
0331: 4C 29 03         JMP      Count10s         ; Keep counting
                  
                  CountDone:
0334: 0A               ASL      A                ; One's digit ...
0335: 0A               ASL      A                ; ... *8 ....
0336: 0A               ASL      A                ; ... to find picture
0337: AA               TAX                       ; One's digit picture to X
0338: 98               TYA                       ; Now the 10's digit
0339: 0A               ASL      A                ; Multiply ...
033A: 0A               ASL      A                ; ... by 8 ...
033B: 0A               ASL      A                ; ... to find picture
033C: A8               TAY                       ; 10's picture in Y
                  
033D: B9 15 06         LDA      DIGITS,Y         ; Get the 10's digit
0340: 29 F0            AND      #0xF0            ; Upper nibble
0342: 8D 97 00         STA      SCORE_PF1        ; Store left side
0345: BD 15 06         LDA      DIGITS,X         ; Get the 1's digit
0348: 29 0F            AND      #0x0F            ; Lower nibble
034A: 0D 97 00         ORA      SCORE_PF1        ; Put left and right half together
034D: 8D 97 00         STA      SCORE_PF1        ; And store image
                  
                  ; We have plenty of code space. Time and registers are at a premium.
                  ; So copy/past the code for each row
                  
0350: B9 16 06         LDA      DIGITS+1,Y       ; Repeat for 2nd line of picture ...
0353: 29 F0            AND      #0xF0            ; ...
0355: 8D 98 00         STA      SCORE_PF1+1      ; ...
0358: BD 16 06         LDA      DIGITS+1,X       ; ...
035B: 29 0F            AND      #15              ; ...
035D: 0D 98 00         ORA      SCORE_PF1+1      ; ...
0360: 8D 98 00         STA      SCORE_PF1+1      ; ...
                  
0363: B9 17 06         LDA      DIGITS+2,Y       ; Repeat for 3nd line of picture
0366: 29 F0            AND      #0xF0            ; ...
0368: 8D 99 00         STA      SCORE_PF1+2      ; ...
036B: BD 17 06         LDA      DIGITS+2,X       ; ...
036E: 29 0F            AND      #0x0F            ; ...
0370: 0D 99 00         ORA      SCORE_PF1+2      ; ...
0373: 8D 99 00         STA      SCORE_PF1+2      ; ...
                  
0376: B9 18 06         LDA      DIGITS+3,Y       ; Repeat for 4th line of picture
0379: 29 F0            AND      #0xF0            ; ...
037B: 8D 9A 00         STA      SCORE_PF1+3      ; ...
037E: BD 18 06         LDA      DIGITS+3,X       ; ...
0381: 29 0F            AND      #0x0F            ; ...
0383: 0D 9A 00         ORA      SCORE_PF1+3      ; ...
0386: 8D 9A 00         STA      SCORE_PF1+3      ; ...
                  
0389: B9 19 06         LDA      DIGITS+4,Y       ; Repeat for 5th line of picture
038C: 29 F0            AND      #0xF0            ; ...
038E: 8D 9B 00         STA      SCORE_PF1+4      ; ...
0391: BD 19 06         LDA      DIGITS+4,X       ; ...
0394: 29 0F            AND      #0x0F            ; ...
0396: 0D 9B 00         ORA      SCORE_PF1+4      ; ...
0399: 8D 9B 00         STA      SCORE_PF1+4      ; ...
                  
039C: A9 00            LDA      #0               ; For now ...
039E: 8D 9D 00         STA      SCORE_PF2        ; ... there ...
03A1: 8D 9E 00         STA      SCORE_PF2+1      ; ... is ...
03A4: 8D 9F 00         STA      SCORE_PF2+2      ; ... no ...
03A7: 8D A0 00         STA      SCORE_PF2+3      ; ... 100s ...
03AA: 8D A1 00         STA      SCORE_PF2+4      ; ... digit drawn
                  
03AD: 60               RTS                       ; Done
                  
                  EXPERTISE:
                  
                  ;  This function changes the Y position of the players based on the
                  ;  position of their respective pro/novice switches. The player 1
                  ;  position is NOT changed if the mode is a single-player game.
                  
03AE: AD 82 02         LDA      SWCHB            ; Check P0 ...
03B1: 29 40            AND      #0x40            ; ... pro/novice settings
03B3: C9 00            CMP      #0               ; Amateur?
03B5: F0 05            BEQ      ExpP0Ama         ; Yes ... near the bottom of screen
03B7: A9 08            LDA      #8               ; Pro ... near the top
03B9: 4C BE 03         JMP      ExpP1            ; Store and check P0
                  ExpP0Ama:
03BC: A9 0C            LDA      #12              ; near the bottom
                  
                  ExpP1:
03BE: 8D 83 00         STA      PLAYR0Y          ; Player 0 Y coordinate
                  
03C1: AE 84 00         LDX      PLAYR1Y          ; Is P1 on ...
03C4: E0 FF            CPX      #255             ; ... the screen?
03C6: F0 13            BEQ      ExpNoP1          ; No ... skip all this
03C8: AD 82 02         LDA      SWCHB            ; Check P1 ...
03CB: 29 80            AND      #0x80            ; ... pro/novice settings
03CD: C9 00            CMP      #0               ; Amateur?
03CF: F0 05            BEQ      ExpP1Ama         ; Yes ... near the bottom of the screen
03D1: A2 08            LDX      #8               ; Pro ... near the top
03D3: 4C D8 03         JMP      ExpDone          ; Store and out
                  ExpP1Ama:
03D6: A2 0C            LDX      #12              ; Novice ... near the bottom
                  ExpDone:
03D8: 8E 84 00         STX      PLAYR1Y          ; Player 1 Y coordinate
                  ExpNoP1:
03DB: 60               RTS                       ; Done
                  
                  ADJUST_DIF:
                  
                  ;  This function adjusts the wall game difficulty values based on the
                  ;  current score. The music can also change with the difficulty. A single
                  ;  table describes the new values and when they take effect.
                  
03DC: A2 00            LDX      #0               ; Starting at index 0
                  
                  AdjNextRow:
03DE: BD CA 05         LDA      SKILL_VALUES,X   ; Get the score match
03E1: C9 FF            CMP      #255             ; At the end of the table?
03E3: D0 01            BNE      AdjCheckTable    ; No ... check this row
03E5: 60               RTS                       ; End of the table ... leave it alone
                  AdjCheckTable:
03E6: CD 8A 00         CMP      WALLCNT          ; Is this our row?
03E9: D0 2F            BNE      AdjBump          ; No ... bump to next
03EB: E8               INX                       ; Copy ...
03EC: BD CA 05         LDA      SKILL_VALUES,X   ; ... new ...
03EF: 8D 89 00         STA      WALL_INC         ; ... wall increment
03F2: E8               INX                       ; Copy ...
03F3: BD CA 05         LDA      SKILL_VALUES,X   ; ... new ...
03F6: 8D 8B 00         STA      WALLDELY         ; ... wall ...
03F9: 8D 8C 00         STA      WALLDELYR        ; ... delay
03FC: E8               INX                       ; Copy ...
03FD: BD CA 05         LDA      SKILL_VALUES,X   ; ... new ...
0400: 8D 96 00         STA      GAPBITS          ; ... gap pattern
0403: E8               INX                       ; Copy ...
0404: BD CA 05         LDA      SKILL_VALUES,X   ; ... new ...
0407: 8D A4 00         STA      MUSAIND          ; ... MusicA index
040A: E8               INX                       ; Copy ...
040B: BD CA 05         LDA      SKILL_VALUES,X   ; ... new ...
040E: 8D A7 00         STA      MUSBIND          ; ... MusicB index
0411: A9 01            LDA      #1               ; Force ...
0413: 8D A3 00         STA      MUSADEL          ; ... music to ...
0416: 8D A6 00         STA      MUSBDEL          ; ... start new
0419: 60               RTS                       ; Done
                  AdjBump:
041A: E8               INX                       ; Move ...
041B: E8               INX                       ; ... X ...
041C: E8               INX                       ; ... to ...
041D: E8               INX                       ; ... next ...
041E: E8               INX                       ; ... row of ...
041F: E8               INX                       ; ... table
0420: 4C DE 03         JMP      AdjNextRow       ; Try next row
                  
                  
                  SEL_RESET_CHK:
                  
                  ;  This function checks for changes to the reset/select
                  ;  switches and debounces the transitions.
                  ;  xxxxxxSR (Select, Reset)
                  
0423: AE 90 00         LDX      DEBOUNCE         ; Get the last value
0426: AD 82 02         LDA      SWCHB            ; New value
0429: 29 03            AND      #3               ; Only need bottom 2 bits
042B: CD 90 00         CMP      DEBOUNCE         ; Same as before?
042E: F0 08            BEQ      SelDebounce      ; Yes ... return nothing changed
0430: 8D 90 00         STA      DEBOUNCE         ; Hold new last value
0433: 49 FF            EOR      #255             ; Active low to active high
0435: 29 03            AND      #3               ; Only need select/reset
0437: 60               RTS                       ; Return changes
                  SelDebounce:
0438: A9 00            LDA      #0               ; Return 0 ...
043A: 60               RTS                       ; ... nothing changed
                  
                  
                  INIT_MUSIC:
                  
                  ;  This function initializes the hardware and temporaries
                  ;  for 2-channel music
                  
043B: A9 06            LDA      #6               ; Audio control ...
043D: 8D 15 00         STA      AUDC0            ; ... to pure ...
0440: 8D 16 00         STA      AUDC1            ; ... tones
0443: A9 00            LDA      #0               ; Turn off ...
0445: 8D 19 00         STA      AUDV0            ; ... all ...
0448: 8D 1A 00         STA      AUDV1            ; ... sound
044B: 8D A4 00         STA      MUSAIND          ; Music pointers ...
044E: 8D A7 00         STA      MUSBIND          ; ... to top of data
0451: A9 01            LDA      #1               ; Force ...
0453: 8D A3 00         STA      MUSADEL          ; ... music ...
0456: 8D A6 00         STA      MUSBDEL          ; ... reload
0459: A9 0F            LDA      #15              ; Set volume levels ...
045B: 8D A5 00         STA      MUSAVOL          ; ... to ...
045E: 8D A8 00         STA      MUSBVOL          ; ... maximum
0461: 60               RTS                       ; Done
                  
                  PROCESS_MUSIC:
                  
                  ;  This function is called once per frame to process the
                  ;  2 channel music. Two tables contain the commands/notes
                  ;  for individual channels. This function changes the
                  ;  notes at the right time.
                  
0462: CE A3 00         DEC      MUSADEL          ; Current note on Channel A ended?
0465: D0 65            BNE      MusDoB           ; No ... let it play
                  
                  MusChanA:
0467: AE A4 00         LDX      MUSAIND          ; Voice-A index
046A: BD 71 05         LDA      MUSICA,X         ; Get the next music command
046D: C9 00            CMP      #0               ; Jump?
046F: F0 28            BEQ      MusCmdJumpA      ; Yes ... handle it
0471: C9 01            CMP      #1               ; Control?
0473: F0 14            BEQ      MusCmdCtrlA      ; Yes ... handle it
0475: C9 02            CMP      #2               ; Volume?
0477: D0 2F            BNE      MusCmdToneA      ; No ... must be a note
0479: E8               INX                       ; Point to volume value
047A: EE A4 00         INC      MUSAIND          ; Bump the music pointer
047D: BD 71 05         LDA      MUSICA,X         ; Get the volume value
0480: EE A4 00         INC      MUSAIND          ; Bump the music pointer
0483: 8D A5 00         STA      MUSAVOL          ; Store the new volume value
0486: 4C 67 04         JMP      MusChanA         ; Keep processing through a tone
                  
                  MusCmdCtrlA:
0489: E8               INX                       ; Point to the control value
048A: EE A4 00         INC      MUSAIND          ; Bump the music pointer
048D: BD 71 05         LDA      MUSICA,X         ; Get the control value
0490: EE A4 00         INC      MUSAIND          ; Bump the music pointer
0493: 8D 15 00         STA      AUDC0            ; Store the new control value
0496: 4C 67 04         JMP      MusChanA         ; Keep processing through a tone
                  
                  MusCmdJumpA:
0499: E8               INX                       ; Point to jump value
049A: 8A               TXA                       ; X to ...
049B: A8               TAY                       ; ... Y (pointer to jump value)
049C: E8               INX                       ; Point one past jump value
049D: 8A               TXA                       ; Into A so we can subtract
049E: 38               SEC                       ; New ...
049F: F9 71 05         SBC      MUSICA,Y         ; ... index
04A2: 8D A4 00         STA      MUSAIND          ; Store it
04A5: 4C 67 04         JMP      MusChanA         ; Keep processing through a tone
                  
                  MusCmdToneA:
04A8: AC A5 00         LDY      MUSAVOL          ; Get the volume
04AB: 29 1F            AND      #0x1F            ; Lower 5 bits are frequency
04AD: C9 1F            CMP      #0x1F            ; Is this a silence?
04AF: D0 02            BNE      MusNoteA         ; No ... play it
04B1: A0 00            LDY      #0               ; Frequency of 31 flags silence
                  MusNoteA:
04B3: 8D 17 00         STA      AUDF0            ; Store the frequency
04B6: 8C 19 00         STY      AUDV0            ; Store the volume
04B9: BD 71 05         LDA      MUSICA,X         ; Get the note value again
04BC: EE A4 00         INC      MUSAIND          ; Bump to the next command
04BF: 6A               ROR      A                ; The upper ...
04C0: 6A               ROR      A                ; ... three ...
04C1: 6A               ROR      A                ; ... bits ...
04C2: 6A               ROR      A                ; ... hold ...
04C3: 6A               ROR      A                ; ... the ...
04C4: 29 07            AND      #7               ; ... delay
04C6: 18               CLC                       ; No accidental carry
04C7: 2A               ROL      A                ; Every delay tick ...
04C8: 2A               ROL      A                ; ... is *4 frames
04C9: 8D A3 00         STA      MUSADEL          ; Store the note delay
                  
                  MusDoB:
                  
04CC: CE A6 00         DEC      MUSBDEL
04CF: D0 65            BNE      MusDoDone
                  
                  MusChanB:
04D1: AE A7 00         LDX      MUSBIND
04D4: BD 9E 05         LDA      MUSICB,X
04D7: C9 00            CMP      #0
04D9: F0 28            BEQ      MusCmdJumpB
04DB: C9 01            CMP      #1
04DD: F0 14            BEQ      MusCmdCtrlB
04DF: C9 02            CMP      #2
04E1: D0 2F            BNE      MusCmdToneB
04E3: E8               INX
04E4: EE A7 00         INC      MUSBIND
04E7: BD 9E 05         LDA      MUSICB,X
04EA: EE A7 00         INC      MUSBIND
04ED: 8D A8 00         STA      MUSBVOL
04F0: 4C D1 04         JMP      MusChanB
                  
                  MusCmdCtrlB:
04F3: E8               INX
04F4: EE A7 00         INC      MUSBIND
04F7: BD 9E 05         LDA      MUSICB,X
04FA: EE A7 00         INC      MUSBIND
04FD: 8D 16 00         STA      AUDC1
0500: 4C D1 04         JMP      MusChanB
                  
                  MusCmdJumpB:
0503: E8               INX
0504: 8A               TXA
0505: A8               TAY
0506: E8               INX
0507: 8A               TXA
0508: 38               SEC
0509: F9 9E 05         SBC      MUSICB,Y
050C: 8D A7 00         STA      MUSBIND
050F: 4C D1 04         JMP      MusChanB
                  
                  MusCmdToneB:
0512: AC A8 00         LDY      MUSBVOL
0515: 29 1F            AND      #0x1F
0517: C9 1F            CMP      #0x1F
0519: D0 02            BNE      MusNoteB
051B: A0 00            LDY      #0
                  MusNoteB:
051D: 8D 18 00         STA      AUDF1
0520: 8C 1A 00         STY      AUDV1
0523: BD 9E 05         LDA      MUSICB,X
0526: EE A7 00         INC      MUSBIND
0529: 6A               ROR      A
052A: 6A               ROR      A
052B: 6A               ROR      A
052C: 6A               ROR      A
052D: 6A               ROR      A
052E: 29 07            AND      #7
0530: 18               CLC
0531: 2A               ROL      A
0532: 2A               ROL      A
0533: 8D A6 00         STA      MUSBDEL
                  
                  MusDoDone:
0536: 60               RTS                       ; Done
                  
                  
                  INIT_GO_FX:
                  
                  ;  This function initializes the hardware and temporaries
                  ;  to play the soundeffect of a player hitting the wall
                  
0537: A9 05            LDA      #5               ; Set counter for frame delay ...
0539: 8D 86 00         STA      MUS_TMP1         ; ... between frequency change
053C: A9 03            LDA      #3               ; Tone type ...
053E: 8D 15 00         STA      AUDC0            ; ... poly tone
0541: A9 0F            LDA      #15              ; Volume A ...
0543: 8D 19 00         STA      AUDV0            ; ... to max
0546: A9 00            LDA      #0               ; Volume B ...
0548: 8D 1A 00         STA      AUDV1            ; ... silence
054B: A9 F0            LDA      #240             ; Initial ...
054D: 8D 85 00         STA      MUS_TMP0         ; ... sound ...
0550: 8D 17 00         STA      AUDF0            ; ... frequency
0553: 60               RTS                       ; Done
                  
                  PROCESS_GO_FX:
                  
                  ;  This function is called once per scanline to play the
                  ;  soundeffects of a player hitting the wall.
                  
0554: CE 86 00         DEC      MUS_TMP1         ; Time to change the frequency?
0557: D0 15            BNE      FxRun            ; No ... let it run
0559: A9 05            LDA      #5               ; Reload ...
055B: 8D 86 00         STA      MUS_TMP1         ; ... the frame count
055E: EE 85 00         INC      MUS_TMP0         ; Increment ...
0561: AD 85 00         LDA      MUS_TMP0         ; ... the frequency divisor
0564: 8D 17 00         STA      AUDF0            ; Change the frequency
0567: C9 00            CMP      #0
0569: D0 03            BNE      FxRun
056B: A9 01            LDA      #1               ; All done ... return 1
056D: 60               RTS                       ; Done
                  FxRun:
056E: A9 00            LDA      #0               ; Keep playing
0570: 60               RTS                       ; Done
                  
                  ;  Music commands for Channel A and Channel B
                  
                  ;  A word on music and wall timing ...
                  
                  ;  Wall moves between scanlines 0 and 111 (112 total)
                  
                  ;  Wall-increment   frames-to-top
                  ;       3             336
                  ;       2             224
                  ;       1             112
                  ;      0.5             56  ; Ah ... but we are getting one less
                  
                  ;  Each tick is multiplied by 4 to yield 4 frames per tick
                  ;  32 ticks/song = 32*4 = 128 frames / song
                  
                  ;  We want songs to start with wall at top ...
                  
                  ;  Find the least-common-multiple
                  ;  336 and 128 : 2688 8 walls, 21 musics
                  ;  224 and 128 :  896 4 walls,  7 musics
                  ;  112 and 128 :  896 8 walls,  7 musics
                  ;   56 and 128 :  896 16 walls, 7 musics
                  
                  ;  Wall moving every other gives us 112*2=224 scanlines
                  ;  Song and wall are at start every 4
                  ;  1 scanline, every 8
                  ;  Wall delay=3 gives us 128*3=336 scanlines 2
                  
                  .MUSCMD_JUMP      =     0      ; Music command value for JUMP
                  .MUSCMD_CONTROL   =     1      ; Music command value for CONTROL
                  .MUSCMD_VOLUME    =     2      ; Music command value for VOLUME
                  .MUS_REST         =     31     ; Frequency value for silence
                  .MUS_DEL_1        =     32*1   ; Note duration 1
                  .MUS_DEL_2        =     32*2   ; Note duration 2
                  .MUS_DEL_3        =     32*3   ; Note duration 3
                  .MUS_DEL_4        =     32*4   ; Note duration 4
                  
                  MUSICA:
                  
                  MA_SONG_1:
                  
0571: 01 0C            .    MUSCMD_CONTROL, 12
0573: 02 0F            .    MUSCMD_VOLUME,  15 ; Volume (full)
                  
                  MA1_01:
0575: 6F               .    MUS_DEL_3  +  15
0576: 3F               .    MUS_DEL_1  +  MUS_REST
0577: 6F               .    MUS_DEL_3  +  15
0578: 3F               .    MUS_DEL_1  +  MUS_REST
0579: 27               .    MUS_DEL_1  +  7
057A: 3F               .    MUS_DEL_1  +  MUS_REST
057B: 27               .    MUS_DEL_1  +  7
057C: 3F               .    MUS_DEL_1  +  MUS_REST
057D: 5F               .    MUS_DEL_2  +  MUS_REST
057E: 28               .    MUS_DEL_1  +  8
057F: 3F               .    MUS_DEL_1  +  MUS_REST
0580: 9F               .    MUS_DEL_4  +  MUS_REST
0581: 51               .    MUS_DEL_2  +  17
0582: 5F               .    MUS_DEL_2  +  MUS_REST
0583: 51               .    MUS_DEL_2  +  17
0584: 5F               .    MUS_DEL_2  +  MUS_REST
0585: 70               .    MUS_DEL_3  +  16
0586: 3F               .    MUS_DEL_1  +  MUS_REST
0587: 00 14            .    MUSCMD_JUMP, (MA1_END - MA1_01) ; Repeat back to top
                  
                  MA1_END:
                  
                  MA_SONG_2:
0589: 01 0C            .    MUSCMD_CONTROL, 12
058B: 02 0F            .    MUSCMD_VOLUME,  15
                  
                  MA2_01:
058D: 2F               .    MUS_DEL_1  +  15
058E: 3F               .    MUS_DEL_1  +  MUS_REST
058F: 2F               .    MUS_DEL_1  +  15
0590: 3F               .    MUS_DEL_1  +  MUS_REST
0591: 5F               .    MUS_DEL_2  +  MUS_REST
0592: 87               .    MUS_DEL_4  +  7
0593: 9F               .    MUS_DEL_4  +  MUS_REST
0594: 4F               .    MUS_DEL_2  +  15
0595: 9F               .    MUS_DEL_4  +  MUS_REST
0596: 4C               .    MUS_DEL_2  +  12
0597: 5F               .    MUS_DEL_2  +  MUS_REST
0598: 4F               .    MUS_DEL_2  +  15
0599: 5F               .    MUS_DEL_2  +  MUS_REST
059A: 51               .    MUS_DEL_2  +  17
059B: 5F               .    MUS_DEL_2  +  MUS_REST
059C: 00 11            .    MUSCMD_JUMP, (MA2_END - MA2_01) ; Repeat back to top
                  MA2_END:
                  
                  MUSICB:
                  
                  MB_SONG_1:
                  
059E: 01 08            .    MUSCMD_CONTROL, 8
05A0: 02 08            .    MUSCMD_VOLUME,  8 ; Volume (half)
                  
                  MB1_01:
05A2: 2A               .    MUS_DEL_1  +  10
05A3: 3F               .    MUS_DEL_1  +  MUS_REST
05A4: 34               .    MUS_DEL_1  +  20
05A5: 3F               .    MUS_DEL_1  +  MUS_REST
05A6: 3E               .    MUS_DEL_1  +  30
05A7: 3F               .    MUS_DEL_1  +  MUS_REST
05A8: 2F               .    MUS_DEL_1  +  15
05A9: 3F               .    MUS_DEL_1  +  MUS_REST
05AA: 2A               .    MUS_DEL_1  +  10
05AB: 3F               .    MUS_DEL_1  +  MUS_REST
05AC: 34               .    MUS_DEL_1  +  20
05AD: 3F               .    MUS_DEL_1  +  MUS_REST
05AE: 3E               .    MUS_DEL_1  +  30
05AF: 3F               .    MUS_DEL_1  +  MUS_REST
05B0: 2F               .    MUS_DEL_1  +  15
05B1: 3F               .    MUS_DEL_1  +  MUS_REST
05B2: 00 12            .    MUSCMD_JUMP, (MB1_END - MB1_01) ; Repeat back to top
                  MB1_END:
                  
                  MB_SONG_2:
                  
05B4: 01 08            .    MUSCMD_CONTROL, 8
05B6: 02 08            .    MUSCMD_VOLUME,  8
                  
                  MB2_01:
05B8: 21               .    MUS_DEL_1  +  1
05B9: 3F               .    MUS_DEL_1  +  MUS_REST
05BA: 21               .    MUS_DEL_1  +  1
05BB: 3F               .    MUS_DEL_1  +  MUS_REST
05BC: 21               .    MUS_DEL_1  +  1
05BD: 3F               .    MUS_DEL_1  +  MUS_REST
05BE: 21               .    MUS_DEL_1  +  1
05BF: 3F               .    MUS_DEL_1  +  MUS_REST
05C0: 3E               .    MUS_DEL_1  +  30
05C1: 3F               .    MUS_DEL_1  +  MUS_REST
05C2: 3E               .    MUS_DEL_1  +  30
05C3: 3F               .    MUS_DEL_1  +  MUS_REST
05C4: 3E               .    MUS_DEL_1  +  30
05C5: 3F               .    MUS_DEL_1  +  MUS_REST
05C6: 3E               .    MUS_DEL_1  +  30
05C7: 3F               .    MUS_DEL_1  +  MUS_REST
05C8: 00 12            .    MUSCMD_JUMP, (MB2_END - MB2_01) ; Repeat back to top
                  MB2_END:
                  
                  SKILL_VALUES:
                  
                  ;  This table describes how to change the various
                  ;  difficulty parameters as the game progresses.
                  ;  For instance, the second entry in the table
                  ;  says that when the score is 4, change the values of
                  ;  wall-increment to 1, frame-delay to 2, gap-pattern to 0,
                  ;  MusicA to 24, and MusicB to 22.
                  
                  ;  A 255 on the end of the table indicates the end
                  
                  ;       Wall  Inc  Delay   Gap       MA                 MB
05CA: 00 01 03 00 00 00 .    0,     1,   3,     0  ,MA_SONG_1-MUSICA , MB_SONG_1-MUSICB
05D0: 04 01 02 00 18 16 .    4,     1,   2,     0  ,MA_SONG_2-MUSICA , MB_SONG_2-MUSICB
05D6: 08 01 01 00 00 00 .    8,     1,   1,     0  ,MA_SONG_1-MUSICA , MB_SONG_1-MUSICB
05DC: 10 01 01 01 18 16 .    16,    1,   1,     1  ,MA_SONG_2-MUSICA , MB_SONG_2-MUSICB
05E2: 18 01 01 03 00 00 .    24,    1,   1,     3  ,MA_SONG_1-MUSICA , MB_SONG_1-MUSICB
05E8: 20 01 01 07 18 16 .    32,    1,   1,     7  ,MA_SONG_2-MUSICA , MB_SONG_2-MUSICB
05EE: 28 01 01 0F 00 00 .    40,    1,   1,    15  ,MA_SONG_1-MUSICA , MB_SONG_1-MUSICB
05F4: 30 02 01 00 18 16 .    48,    2,   1,     0  ,MA_SONG_2-MUSICA , MB_SONG_2-MUSICB
05FA: 40 02 01 01 00 00 .    64,    2,   1,     1  ,MA_SONG_1-MUSICA , MB_SONG_1-MUSICB
0600: 50 02 01 03 18 16 .    80,    2,   1,     3  ,MA_SONG_2-MUSICA , MB_SONG_2-MUSICB
0606: 60 02 01 07 00 00 .    96 ,   2,   1,     7  ,MA_SONG_1-MUSICA , MB_SONG_1-MUSICB
060C: FF               .    255
                  
                  GR_PLAYER:
                  ;  Image for players (8x8)
                  ; .subs .=0, *=1
                  ;
060D: 10               .    0b__...1....
060E: 10               .    0b__...1....
060F: 28               .    0b__..1.1...
0610: 28               .    0b__..1.1...
0611: 54               .    0b__.1.1.1..
0612: 54               .    0b__.1.1.1..
0613: AA               .    0b__1.1.1.1.
0614: 7C               .    0b__.11111..
                  
                  DIGITS:
                  ;  Images for numbers
                  ;  We only need 5 rows, but the extra space on the end makes each digit 8 rows,
                  ;  which makes it the multiplication easier.
                  
0615: 0E               .   0b__....111.  ; 0 (leading 0 is blank)
0616: 0A               .   0b__....1.1.
0617: 0A               .   0b__....1.1.
0618: 0A               .   0b__....1.1.
0619: 0E               .   0b__....111.
061A: 00               .   0b__........
061B: 00               .   0b__........
061C: 00               .   0b__........
                  
061D: 22               .   0b__..1...1.  ; 1
061E: 22               .   0b__..1...1.
061F: 22               .   0b__..1...1.
0620: 22               .   0b__..1...1.
0621: 22               .   0b__..1...1.
0622: 00               .   0b__........
0623: 00               .   0b__........
0624: 00               .   0b__........
                  
0625: EE               .   0b__111.111.  ; 2
0626: 22               .   0b__..1...1.
0627: EE               .   0b__111.111.
0628: 88               .   0b__1...1...
0629: EE               .   0b__111.111.
062A: 00               .   0b__........
062B: 00               .   0b__........
062C: 00               .   0b__........
                  
062D: EE               .   0b__111.111.  ; 3
062E: 22               .   0b__..1...1.
062F: 66               .   0b__.11..11.
0630: 22               .   0b__..1...1.
0631: EE               .   0b__111.111.
0632: 00               .   0b__........
0633: 00               .   0b__........
0634: 00               .   0b__........
                  
0635: AA               .   0b__1.1.1.1.  ; 4
0636: AA               .   0b__1.1.1.1.
0637: EE               .   0b__111.111.
0638: 22               .   0b__..1...1.
0639: 22               .   0b__..1...1.
063A: 00               .   0b__........
063B: 00               .   0b__........
063C: 00               .   0b__........
                  
063D: EE               .   0b__111.111. ; 5
063E: 88               .   0b__1...1...
063F: EE               .   0b__111.111.
0640: 22               .   0b__..1...1.
0641: EE               .   0b__111.111.
0642: 00               .   0b__........
0643: 00               .   0b__........
0644: 00               .   0b__........
                  
0645: EE               .   0b__111.111. ; 6
0646: 88               .   0b__1...1...
0647: EE               .   0b__111.111.
0648: AA               .   0b__1.1.1.1.
0649: EE               .   0b__111.111.
064A: 00               .   0b__........
064B: 00               .   0b__........
064C: 00               .   0b__........
                  
064D: EE               .   0b__111.111. ; 7
064E: 22               .   0b__..1...1.
064F: 22               .   0b__..1...1.
0650: 22               .   0b__..1...1.
0651: 22               .   0b__..1...1.
0652: 00               .   0b__........
0653: 00               .   0b__........
0654: 00               .   0b__........
                  
0655: EE               .   0b__111.111. ; 8
0656: AA               .   0b__1.1.1.1.
0657: EE               .   0b__111.111.
0658: AA               .   0b__1.1.1.1.
0659: EE               .   0b__111.111.
065A: 00               .   0b__........
065B: 00               .   0b__........
065C: 00               .   0b__........
                  
065D: EE               .   0b__111.111. ; 9
065E: AA               .   0b__1.1.1.1.
065F: EE               .   0b__111.111.
0660: 22               .   0b__..1...1.
0661: EE               .   0b__111.111.
0662: 00               .   0b__........
0663: 00               .   0b__........
0664: 00               .   0b__........
                  
                  F7FA:
                  ; 6502 vectors
0665: 00 F0            . 00,0xF0
0667: 00 F0            . 00,0xF0  ; Reset vector (top of program)
0669: 00 F0            . 00,0xF0
                  
